name: Release

on:
  push:
    tags: ["v*"]

permissions:
  contents: write
  id-token: write

jobs:
  test:
    name: Run Tests Before Release
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Install dependencies
        run: uv pip install --system -e ".[all]"

      - name: Run tests
        run: uv run pytest -n auto --maxfail=1 --disable-warnings tests/

  build-python-packages:
    name: Build Python Packages
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install build tools
        run: uv pip install build hatchling hatch-vcs

      - name: Build distributions
        run: uv run python -m build --outdir dist

      - name: Verify distribution files
        run: |
          ls -la dist/
          test -n "$(find dist -name '*.whl')" || (echo "Wheel file missing" && exit 1)
          test -n "$(find dist -name '*.tar.gz')" || (echo "Source distribution missing" && exit 1)

      - name: Upload Python packages
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/
          retention-days: 90

  build-binaries:
    name: Build Binaries
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Install dependencies and build tools
        run: |
          uv pip install --system -e ".[all]"
          uv pip install --system pyinstaller

      - name: Build binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          uv run pyinstaller --onefile --name twat-coding-${{ runner.os }}-${{ runner.arch }} \
            --add-data "src/twat_coding:twat_coding" \
            --hidden-import twat_coding.pystubnik.cli \
            --hidden-import twat_coding.pystubnik.config \
            --hidden-import twat_coding.pystubnik.processors.stub_generation \
            src/twat_coding/pystubnik/cli.py

      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        run: |
          uv run pyinstaller --onefile --name twat-coding-${{ runner.os }}-${{ runner.arch }}.exe \
            --add-data "src/twat_coding;twat_coding" \
            --hidden-import twat_coding.pystubnik.cli \
            --hidden-import twat_coding.pystubnik.config \
            --hidden-import twat_coding.pystubnik.processors.stub_generation \
            src/twat_coding/pystubnik/cli.py

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ runner.os }}-${{ runner.arch }}
          path: dist/twat-coding-*
          retention-days: 90

  release:
    name: Release to PyPI and GitHub
    needs: [build-python-packages, build-binaries]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/twat-coding
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Python packages
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binary-*
          path: binaries/
          merge-multiple: true

      - name: Prepare release assets
        run: |
          ls -la dist/
          ls -la binaries/
          
          # Create release directory
          mkdir -p release-assets
          
          # Copy Python packages
          cp dist/* release-assets/
          
          # Copy and rename binaries
          for file in binaries/*; do
            if [ -f "$file" ]; then
              cp "$file" release-assets/
            fi
          done
          
          # List all release assets
          echo "Release assets:"
          ls -la release-assets/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          generate_release_notes: true
          body: |
            ## Installation

            ### Python Package
            ```bash
            pip install twat-coding
            ```

            ### Binary Downloads
            - **Linux**: Download `twat-coding-Linux-X64`
            - **macOS**: Download `twat-coding-macOS-X64`
            - **Windows**: Download `twat-coding-Windows-X64.exe`

            Make the binary executable and run directly:
            ```bash
            chmod +x twat-coding-Linux-X64
            ./twat-coding-Linux-X64 --help
            ```

            ## What's Changed
            See the release notes below for detailed changes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
name: Build & Test

on:
  push:
    branches: [main]
    tags-ignore: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Ruff lint
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          args: "check --output-format=github"

      - name: Run Ruff Format
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          args: "format --check --respect-gitignore"

      - name: Set up Python for MyPy
        uses: actions/setup-python@v5
        with:
          python-version: "3.12" # Use a specific version for MyPy consistency

      - name: Install UV for MyPy
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true
          cache-suffix: mypy-3.12

      - name: Install all dependencies for MyPy
        run: uv pip install --system -e ".[all]"

      - name: Run MyPy
        run: uv run mypy src/twat_coding tests

  test:
    name: Run Tests
    needs: quality
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-suffix: ${{ matrix.os }}-${{ matrix.python-version }}

      - name: Install all dependencies for testing
        run: |
          uv pip install --system --upgrade pip
          uv pip install --system -e ".[all]" # Use 'all' to ensure all tools are available

      - name: Run tests with Pytest
        run: uv run pytest -n auto --maxfail=1 --disable-warnings --cov-report=xml --cov-config=pyproject.toml --cov=src/twat_coding --cov=tests tests/

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}-${{ matrix.os }}
          path: coverage.xml

  build:
    name: Build Distribution
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install build tools
        run: uv pip install build hatchling hatch-vcs

      - name: Build distributions
        run: uv run python -m build --outdir dist

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 5

  build-binaries:
    name: Build Binaries
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Install dependencies and build tools
        run: |
          uv pip install --system -e ".[all]"
          uv pip install --system pyinstaller

      - name: Build binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          uv run pyinstaller --onefile --name twat-coding-${{ runner.os }}-${{ runner.arch }} \
            --add-data "src/twat_coding:twat_coding" \
            --hidden-import twat_coding.pystubnik.cli \
            --hidden-import twat_coding.pystubnik.config \
            --hidden-import twat_coding.pystubnik.processors.stub_generation \
            src/twat_coding/pystubnik/cli.py

      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        run: |
          uv run pyinstaller --onefile --name twat-coding-${{ runner.os }}-${{ runner.arch }}.exe \
            --add-data "src/twat_coding;twat_coding" \
            --hidden-import twat_coding.pystubnik.cli \
            --hidden-import twat_coding.pystubnik.config \
            --hidden-import twat_coding.pystubnik.processors.stub_generation \
            src/twat_coding/pystubnik/cli.py

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ runner.os }}-${{ runner.arch }}
          path: dist/twat-coding-*
          retention-days: 5 